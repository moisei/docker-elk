input {
	redis {
	 host => 'redis'
	 data_type => 'list'
	 key => 'logstash:redis'
	 batch_count=>100
	}
}
filter {
	multiline {
		pattern => "^\[?(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})"
		negate => true
		what => "previous"
	}
	grok {
		match => ["message", "(.)?%{TIMESTAMP_ISO8601:timestamp}.*(?<loglevel>(ERROR|DEBUG|INFO|WARN))"]
	}
	date {
		locale => "en"
		match => ["timestamp", "YYYY-MM-dd HH:mm:ss.SSS","YYYY-MM-dd HH:mm:ss,SSS","MMM dd YYY HH:mm:ss", "MMM d YYY HH:mm:ss","YYYY-MM-dd 
HH:mm:ss.SSSSS","YYYY-MM-dd HH:mm:ss.SSSSSS", "ISO8601"]
		#timezone => "Europe/Vienna"
		target => "@timestamp"
		#add_field => { "debug" => "timestampMatched"}
	}
	grok {
		match => ["path","%{GREEDYDATA}/%{GREEDYDATA:filename}.log"]
	}
	#grok {
	#	match => ["path","\@(?<apphost>[\w\-_]+)\."]
	#}
	grok {
		match => ["path","(\\\\|//)(?<apphost>[\w\-_]+)"] #(?<apphost>[\w\-_]+)\\
	}
	#grok {
	#	match => ["path","\-(?<application>[\w_]+)\@"]
	#}
	grok {
		match => ["filename","(\-)?(?<application>[\w_]+)(\.|\@)"]
	}
	mutate {
		remove_field => [ "server_message", "timestamp", "_type", "@source" ]
	}
}
output {
	stdout{}
	elasticsearch{
		workers => 5
		hosts => ["elasticsearch"]
	}
}
